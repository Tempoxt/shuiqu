<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<!-- 注解驱动 -->
	<!-- <mvc:annotation-driven> <mvc:message-converters> default StringHttpMessageConverter, 
		solve encoding problem <bean class="org.springframework.http.converter.StringHttpMessageConverter"> 
		<constructor-arg value="UTF-8" /> <property name="writeAcceptCharset" value="false" 
		/> </bean> </mvc:message-converters> </mvc:annotation-driven> -->

	<!-- 解决@ResponseBody注解直接返回对象并转换成JSON时出现406问题，同时解决了返回String类型乱码的问题 -->
	<mvc:annotation-driven>
		<mvc:message-converters>
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>text/plain;charset=UTF-8</value>
						<value>text/html;charset=UTF-8</value>
					</list>
				</property>
			</bean>
			<bean
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>application/json; charset=UTF-8</value>
						<value>application/x-www-form-urlencoded; charset=UTF-8</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- 扫描器 -->
	<context:component-scan base-package="com" />

	<bean id="velocityConfigurer"
		class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
		<property name="resourceLoaderPath">
			<value>./template/</value>
		</property>
		<property name="configLocation" value="classpath:velocity.properties" />
	</bean>
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.velocity.VelocityLayoutViewResolver">
		<property name="suffix">
			<value>.vm</value>
		</property>
		<property name="contentType">
			<value>text/html;charset=UTF-8</value>
		</property>
		<property name="layoutUrl">
			<value>layout/default.vm</value>
		</property>
	</bean>

	<mvc:interceptors>
		<!-- 国际化操作拦截器 如果采用基于（请求/Session/Cookie）则必需配置 -->
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />
		<!-- 如果不定义 mvc:mapping path 将拦截所有的URL请求 -->
		<bean class="com.eviano2o.filter.CheckAppLoginFilter"></bean>
		<bean class="com.eviano2o.filter.CheckWeiXinLoginFilter"></bean>
		<bean class="com.eviano2o.filter.CheckWeiXinIdFilter"></bean>
		<bean class="com.eviano2o.filter.CheckCityFilter"></bean>
		<bean class="com.eviano2o.filter.CheckCityJsonFilter"></bean>
	</mvc:interceptors>


	 
	<!-- <mvc:resources mapping="/template/**" cache-period="3000" location="/template/" order="0">
		<mvc:resource-chain resource-cache="true">
			<mvc:resolvers>
				<bean class="org.springframework.web.servlet.resource.GzipResourceResolver" />
			</mvc:resolvers>
		</mvc:resource-chain>
	</mvc:resources> -->

	<!-- 负责所有bean生命期方法检测 -->
	<bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor" />

	<!-- 自动加载属性配置文件 -->
	<context:property-placeholder location="classpath:jdbc.properties" />

	<!-- 配置业务数据源：方法一，使用druid方式（推荐） -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 配置监控统计拦截的filters <property name="filters"> <value>stat</value> </property> -->
		<property name="driverClassName">
			<value>${jdbc.driverClassName}</value>
		</property>
		<property name="url">
			<value>${jdbc.url}</value>
		</property>
		<property name="username">
			<value>${jdbc.username}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
		</property>
		<property name="maxActive">
			<value>${druid.maxActive}</value>
		</property>
		<property name="minIdle">
			<value>${druid.minIdle}</value>
		</property>
		<property name="initialSize">
			<value>${druid.initialSize}</value>
		</property>
		<property name="maxWait">
			<value>${druid.maxWait}</value>
		</property>
		<property name="testWhileIdle" value="true" />
		<!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
		<property name="validationQuery" value="select getdate()" />
	</bean>
	<!-- 业务数据库JdbcTemplate -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>
	<!-- 配置数据库事务 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:annotation-driven transaction-manager="txManager" />

	<!-- 导入缓存配置 -->
	<import resource="classpath:ehcache-context.xml" />

</beans>
